// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network/query/query.proto

package query

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	TxHash               []string `protobuf:"bytes,1,rep,name=txHash,proto3" json:"txHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c11fab5d33433201, []int{0}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetTxHash() []string {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type QueryReply struct {
	Opinion              []bool   `protobuf:"varint,1,rep,packed,name=opinion,proto3" json:"opinion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c11fab5d33433201, []int{1}
}

func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryReply.Unmarshal(m, b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
}
func (m *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(m, src)
}
func (m *QueryReply) XXX_Size() int {
	return xxx_messageInfo_QueryReply.Size(m)
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetOpinion() []bool {
	if m != nil {
		return m.Opinion
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "query.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "query.QueryReply")
}

func init() { proto.RegisterFile("network/query/query.proto", fileDescriptor_c11fab5d33433201) }

var fileDescriptor_c11fab5d33433201 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x84, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0xac, 0x60, 0x8e, 0x92, 0x1a, 0x17, 0x4f, 0x20, 0x88, 0x11, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0x22, 0x24, 0xc6, 0xc5, 0x56, 0x52, 0xe1, 0x91, 0x58, 0x9c, 0x21, 0xc1, 0xa8, 0xc0,
	0xac, 0xc1, 0x19, 0x04, 0xe5, 0x29, 0xa9, 0x71, 0x71, 0x41, 0xd5, 0x15, 0xe4, 0x54, 0x0a, 0x49,
	0x70, 0xb1, 0xe7, 0x17, 0x64, 0xe6, 0x65, 0xe6, 0xe7, 0x81, 0x95, 0x71, 0x04, 0xc1, 0xb8, 0x46,
	0x4e, 0x5c, 0x1c, 0x6e, 0x01, 0xce, 0x60, 0xa5, 0x42, 0x66, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0xfe,
	0x10, 0x19, 0x21, 0x61, 0x3d, 0x88, 0xf5, 0xc8, 0xd6, 0x49, 0x09, 0xa2, 0x0a, 0x16, 0xe4, 0x54,
	0x2a, 0x31, 0x24, 0xb1, 0x81, 0x5d, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xd6, 0x86,
	0x90, 0xbe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FPCQueryClient is the client API for FPCQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FPCQueryClient interface {
	GetOpinion(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type fPCQueryClient struct {
	cc *grpc.ClientConn
}

func NewFPCQueryClient(cc *grpc.ClientConn) FPCQueryClient {
	return &fPCQueryClient{cc}
}

func (c *fPCQueryClient) GetOpinion(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/query.FPCQuery/GetOpinion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FPCQueryServer is the server API for FPCQuery service.
type FPCQueryServer interface {
	GetOpinion(context.Context, *QueryRequest) (*QueryReply, error)
}

// UnimplementedFPCQueryServer can be embedded to have forward compatible implementations.
type UnimplementedFPCQueryServer struct {
}

func (*UnimplementedFPCQueryServer) GetOpinion(ctx context.Context, req *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpinion not implemented")
}

func RegisterFPCQueryServer(s *grpc.Server, srv FPCQueryServer) {
	s.RegisterService(&_FPCQuery_serviceDesc, srv)
}

func _FPCQuery_GetOpinion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPCQueryServer).GetOpinion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.FPCQuery/GetOpinion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPCQueryServer).GetOpinion(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FPCQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "query.FPCQuery",
	HandlerType: (*FPCQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpinion",
			Handler:    _FPCQuery_GetOpinion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/query/query.proto",
}
